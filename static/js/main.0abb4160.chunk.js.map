{"version":3,"sources":["components/options.js","App.js","serviceWorker.js","index.js"],"names":["sum","Options","state","iteams","pell","deliteams","index","i","Object","assign","_this","a","splice","setState","push","itemPrice","console","log","_this2","this","axios","get","then","res","data","_this3","react_default","createElement","class","id","map","iteam","itemDesc","itemImage","type","onClick","Component","App","className","components_options","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSAoOIA,SAAI,GAsGOC,6MAnGXC,MAAM,CACFC,OAAO,GACPC,KAAK,MAaPC,UAAW,SAACC,EAAOC,GACjB,IAAMJ,EAAOK,OAAOC,OAAO,GAAGC,EAAKR,MAAMC,QACrCQ,EAAGR,EAAOS,OAAON,EAAM,GAE3BI,EAAKG,SAAS,CAACV,OAAOA,IACtBO,EAAKR,MAAME,KAAKU,KAAKH,GACrBX,GAAYW,EAAE,GAAGI,UACjBC,QAAQC,IAAIP,EAAKR,MAAME,MAExBY,QAAQC,IAAIjB,uFAlBO,IAAAkB,EAAAC,KAClBC,IAAMC,IAAN,uEACGC,KAAK,SAAAC,GACJ,IAAMpB,EAASoB,EAAIC,KACnBN,EAAKL,SAAS,CAAEV,8CAoBd,IAAAsB,EAAAN,KACN,OAEMO,EAAAf,EAAAgB,cAAA,WACGD,EAAAf,EAAAgB,cAAA,YAAUC,MAAM,OAChBF,EAAAf,EAAAgB,cAAA,sBAEGD,EAAAf,EAAAgB,cAAA,SAAOE,GAAG,UAEVH,EAAAf,EAAAgB,cAAA,UACMD,EAAAf,EAAAgB,cAAA,sBACAD,EAAAf,EAAAgB,cAAA,uBACAD,EAAAf,EAAAgB,cAAA,uBACAD,EAAAf,EAAAgB,cAAA,qBAEAR,KAAKjB,MAAMC,OAAO2B,IAAI,SAACC,EAAMzB,GAAP,OACxBoB,EAAAf,EAAAgB,cAAA,UACID,EAAAf,EAAAgB,cAAA,UAAMI,EAAMC,UACZN,EAAAf,EAAAgB,cAAA,cAAMI,EAAMhB,WACZW,EAAAf,EAAAgB,cAAA,UAAKI,EAAME,WACXP,EAAAf,EAAAgB,cAAA,SAAOO,KAAK,QAAQC,QAASV,EAAKpB,iBAS9CqB,EAAAf,EAAAgB,cAAA,YAAWC,MAAM,QACfF,EAAAf,EAAAgB,cAAA,sBACAD,EAAAf,EAAAgB,cAAA,SAAOE,GAAG,UACVH,EAAAf,EAAAgB,cAAA,UACQD,EAAAf,EAAAgB,cAAA,sBACAD,EAAAf,EAAAgB,cAAA,uBACAD,EAAAf,EAAAgB,cAAA,wBAIPR,KAAKjB,MAAME,KAAK0B,IAAI,SAAEnB,EAAEL,GAAJ,OAEvBoB,EAAAf,EAAAgB,cAAA,UAEID,EAAAf,EAAAgB,cAAA,UAAMhB,EAAE,GAAGqB,UACXN,EAAAf,EAAAgB,cAAA,cAAOhB,EAAE,GAAGI,UAAZ,KACAW,EAAAf,EAAAgB,cAAA,UAAKhB,EAAE,GAAGsB,eAIZP,EAAAf,EAAAgB,cAAA,uBAAe3B,YAhFXoC,aClNPC,0LATX,OACEX,EAAAf,EAAAgB,cAAA,OAAKW,UAAU,OACbZ,EAAAf,EAAAgB,cAACY,EAAD,cANUH,cCKEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAf,EAAAgB,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.0abb4160.chunk.js","sourcesContent":["/*import React , {Component} from 'react';\r\nimport axios from 'axios'\r\nimport './options.css'\r\nimport { userInfo } from 'os';\r\nimport { stringify } from 'querystring';\r\nvar sum=0;\r\n\r\nclass Options extends Component{\r\n    state={\r\n        iteams:[],\r\n        pell:[],\r\n      }\r\n      \r\n\r\n      componentDidMount() {\r\n        axios.get(`http://94.127.209.194:3333/AudioGramServices/webapi/myresource/menu`)\r\n          .then(res => {\r\n            const iteams = res.data;\r\n            this.setState({ iteams });\r\n           \r\n          })\r\n      }  \r\n      \r\n      deliteams =(index ,i)=>{\r\n        const iteams=Object.assign([],this.state.iteams);\r\n        var a= iteams.splice(index,1);\r\n        \r\n        this.setState({iteams:iteams});\r\n        this.state.pell.push(a);\r\n        sum =sum + (a[0].itemPrice);\r\n        console.log(this.state.pell);\r\n       \r\n       console.log(sum);\r\n        \r\n        \r\n        \r\n      }\r\n\r\n      render(){\r\n        return(\r\n          \r\n              <div>\r\n                 <fieldset class=\"tab\">\r\n                 <legend>menu</legend>\r\n\r\n                    <table id=\"table1\">\r\n\r\n                    <tr>\r\n                          <th>itemDesc</th>\r\n                          <th>itemPrice</th>\r\n                          <th>itemImage</th>\r\n                          <th >select</th>\r\n                        </tr>\r\n                        { this.state.iteams.map((iteam,index) =>\r\n                        <tr >\r\n                            <td >{iteam.itemDesc}</td>\r\n                            <td> {iteam.itemPrice}</td>\r\n                            <td>{iteam.itemImage}</td>\r\n                            <input type=\"Radio\" onClick={this.deliteams} ></input>\r\n                          </tr>)}\r\n                </table>\r\n                </fieldset>\r\n              \r\n\r\n\r\n               \r\n\r\n                <fieldset  class=\"tab1\">\r\n                  <legend>Bill</legend>\r\n                  <table id=\"table2\">\r\n                  <tr>\r\n                          <th>itemDesc</th>\r\n                          <th>itemPrice</th>\r\n                          <th>itemImage</th>\r\n                        </tr>\r\n                \r\n\r\n                 { this.state.pell.map(( a,index ) =>\r\n                 \r\n                <tr  >\r\n                  \r\n                    <td >{a[0].itemDesc}</td>\r\n                    <td > {a[0].itemPrice} </td>\r\n                    <td>{a[0].itemImage}</td>\r\n                    \r\n                  </tr>)}\r\n                  </table>\r\n                </fieldset>\r\n                \r\n                \r\n               \r\n\r\n\r\n                \r\n                  \r\n                   \r\n    \r\n   \r\n               </div>\r\n        );\r\n      }\r\n\r\n    }\r\n \r\nexport default Options;*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import React , {Component} from 'react';\r\nimport axios from 'axios'\r\nimport './options.css'\r\nimport { userInfo } from 'os';\r\nimport { stringify } from 'querystring';\r\nvar sum=0;\r\n\r\nclass Options extends Component{\r\n    state={\r\n        iteams:[],\r\n        pell:[],\r\n      }\r\n      \r\n\r\n      componentDidMount() {\r\n        axios.get(`http://94.127.209.194:3333/AudioGramServices/webapi/myresource/menu`)\r\n          .then(res => {\r\n            const iteams = res.data;\r\n            this.setState({ iteams });\r\n           \r\n          })\r\n      }  \r\n      \r\n      deliteams =(index ,i)=>{\r\n        const iteams=Object.assign([],this.state.iteams);\r\n        var a= iteams.splice(index,1);\r\n        \r\n        this.setState({iteams:iteams});\r\n        this.state.pell.push(a);\r\n        sum =sum + (a[0].itemPrice);\r\n        console.log(this.state.pell);\r\n       \r\n       console.log(sum);\r\n        \r\n        \r\n        \r\n      }\r\n\r\n      render(){\r\n        return(\r\n          \r\n              <div>\r\n                 <fieldset class=\"tab\">\r\n                 <legend>menu</legend>\r\n\r\n                    <table id=\"table1\">\r\n\r\n                    <tr>\r\n                          <th>itemDesc</th>\r\n                          <th>itemPrice</th>\r\n                          <th>itemImage</th>\r\n                          <th >select</th>\r\n                        </tr>\r\n                        { this.state.iteams.map((iteam,index) =>\r\n                        <tr >\r\n                            <td >{iteam.itemDesc}</td>\r\n                            <td> {iteam.itemPrice}</td>\r\n                            <td>{iteam.itemImage}</td>\r\n                            <input type=\"Radio\" onClick={this.deliteams} ></input>\r\n                          </tr>)}\r\n                </table>\r\n                </fieldset>\r\n              \r\n\r\n\r\n               \r\n\r\n                <fieldset  class=\"tab1\">\r\n                  <legend>Bill</legend>\r\n                  <table id=\"table2\">\r\n                  <tr>\r\n                          <th>itemDesc</th>\r\n                          <th>itemPrice</th>\r\n                          <th>itemImage</th>\r\n                        </tr>\r\n                \r\n\r\n                 { this.state.pell.map(( a,index ) =>\r\n                 \r\n                <tr  >\r\n                  \r\n                    <td >{a[0].itemDesc}</td>\r\n                    <td > {a[0].itemPrice} </td>\r\n                    <td>{a[0].itemImage}</td>\r\n                    \r\n                  </tr>)}\r\n                  </table>\r\n                </fieldset>\r\n                \r\n                \r\n               \r\n\r\n\r\n                \r\n                  \r\n                   \r\n    \r\n   \r\n               </div>\r\n        );\r\n      }\r\n\r\n    }\r\n \r\nexport default Options;*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React , {Component} from 'react';\r\nimport axios from 'axios'\r\nimport './options.css'\r\nvar sum=0;\r\n\r\nclass Options extends Component{\r\n    state={\r\n        iteams:[],\r\n        pell:[],\r\n      }\r\n      \r\n\r\n      componentDidMount() {\r\n        axios.get(`http://94.127.209.194:3333/AudioGramServices/webapi/myresource/menu`)\r\n          .then(res => {\r\n            const iteams = res.data;\r\n            this.setState({ iteams });\r\n           \r\n          })\r\n      }  \r\n      \r\n      deliteams =(index ,i)=>{\r\n        const iteams=Object.assign([],this.state.iteams);\r\n        var a= iteams.splice(index,1);\r\n        \r\n        this.setState({iteams:iteams});\r\n        this.state.pell.push(a);\r\n        sum =sum + (a[0].itemPrice);\r\n        console.log(this.state.pell);\r\n       \r\n       console.log(sum);\r\n        \r\n        \r\n        \r\n      }\r\n\r\n      render(){\r\n        return(\r\n          \r\n              <div>\r\n                 <fieldset class=\"tab\">\r\n                 <legend>menu</legend>\r\n\r\n                    <table id=\"table1\">\r\n\r\n                    <tr>\r\n                          <th>itemDesc</th>\r\n                          <th>itemPrice</th>\r\n                          <th>itemImage</th>\r\n                          <th >select</th>\r\n                        </tr>\r\n                        { this.state.iteams.map((iteam,index) =>\r\n                        <tr >\r\n                            <td >{iteam.itemDesc}</td>\r\n                            <td> {iteam.itemPrice}</td>\r\n                            <td>{iteam.itemImage}</td>\r\n                            <input type=\"Radio\" onClick={this.deliteams} ></input>\r\n                          </tr>)}\r\n                </table>\r\n                </fieldset>\r\n              \r\n\r\n\r\n               \r\n\r\n                <fieldset  class=\"tab1\">\r\n                  <legend>Bill</legend>\r\n                  <table id=\"table2\">\r\n                  <tr>\r\n                          <th>itemDesc</th>\r\n                          <th>itemPrice</th>\r\n                          <th>itemImage</th>\r\n                        </tr>\r\n                \r\n\r\n                 { this.state.pell.map(( a,index ) =>\r\n                 \r\n                <tr  >\r\n                  \r\n                    <td >{a[0].itemDesc}</td>\r\n                    <td > {a[0].itemPrice} </td>\r\n                    <td>{a[0].itemImage}</td>\r\n                    \r\n                  </tr>)}\r\n                  </table>\r\n                  <label>Total :{sum}</label>\r\n                </fieldset>\r\n\r\n                \r\n                \r\n                \r\n               \r\n\r\n\r\n                \r\n                  \r\n                   \r\n    \r\n   \r\n               </div>\r\n        );\r\n      }\r\n\r\n    }\r\n \r\nexport default Options;","import React ,{Component} from 'react';\nimport Options from './components/options';\n\nimport './App.css';\n\n\n\nclass App extends Component{\n  \n\n  render(){\n    return(\n      <div className=\"App\">\n        <Options/>\n      </div>\n    )\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}